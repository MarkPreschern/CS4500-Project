#!/usr/bin/python3
import unittest
import sys

# Added folder containing test classes to path
sys.path.append('Common/tests')
sys.path.append('Player/Other/tests')
sys.path.append('Admin/Other/tests')
sys.path.append('Remote/Other/tests')

from board_tests import BoardTests
from tile_tests import TileTests
from hole_tests import HoleTests
from abstract_tile_tests import AbstractTileTests
from state_tests import StateTests
from player_entity_tests import PlayerEntityTests
from game_tree_tests import GameTreeTests
from strategy_tests import StrategyTests
from player_tests import PlayerTests
from referee_tests import RefereeTests
from manager_tests import ManagerTests
from game_visualizer_tests import GameVisualizerTests
from json_serializer_tests import JsonSerializerTests
from server_tests import ServerTests
from client_tests import ClientTests
from remote_player_proxy_tests import RemotePlayerProxyTests


def _create_test_suite(test_cases: [unittest.TestCase]) -> unittest.TestSuite:
    """
    Creates a test suite based on provided test cases.
    :param test_cases: list of test cases to added to suite
    :return: resulting test suite
    """
    suite = unittest.TestSuite()

    # Add each test case to suite
    for case in test_cases:
        # Load tests of current test case
        case_tests = unittest.defaultTestLoader.loadTestsFromTestCase(case)
        # Add tests to suite
        suite.addTest(case_tests)

    return suite


if __name__ == '__main__':
    # Make up collection of test cases
    '''tests = [
        BoardTests,
        TileTests,
        HoleTests,
        AbstractTileTests,
        StateTests,
        PlayerTests,
        GameTreeTests,
        StrategyTests,
        PlayerEntityTests,
        RefereeTests,
        ManagerTests,
        GameVisualizerTests,
        ServerTests,
        ClientTests,
        RemotePlayerProxyTests,
        JsonSerializerTests
    ]'''
    tests = [ServerTests, ClientTests, RemotePlayerProxyTests, JsonSerializerTests]

    # Make up runner to run suite
    runner = unittest.TextTestRunner()
    # Run suite
    result = runner.run(_create_test_suite(tests))

    # Determine # of tests passed
    tests_passed_no = result.testsRun - len(result.failures) \
                      - len(result.skipped) - len(result.errors)
    # Print results
    print(f'\nTotal: {result.testsRun} Passed: {tests_passed_no} Failed:'
          f' {len(result.errors + result.failures)}')
